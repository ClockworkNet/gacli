#!/usr/bin/env python
description = """Copy newline terminated TOTP verification code to Mac OS X
clipboard."""
epilog = """The debug option continually prints verification codes instead of
copying a single code to the clipboard."""
# Standard library
import argparse
import os.path
import stat
import subprocess
import sys
import time
# Third-party
import onetimepass as otp


def pbcopy(data):
    """Copy data to Mac OS X clipbard via pbcopy command."""
    p = subprocess.Popen(["pbcopy"], stdin=subprocess.PIPE)
    p.stdin.write(data)
    p.stdin.close()
    exit_status = p.wait()
    return exit_status


def validate_secret_path(path):
    """Validate secret file exists and has secure permissions."""
    # expand path
    path = os.path.expanduser(path)
    # path exists
    if os.path.exists(path):
        path = os.path.abspath(path)
    else:
        print "ERROR: file does not exist: %s" % path
        sys.exit(1)
    # validate file permissions
    secret_stat = os.stat(path)
    secret_mode = oct(stat.S_IMODE(secret_stat.st_mode))
    if secret_mode != "0600":
        print ("ERROR: permissions of secret file must be 0600 instead of %s" %
               secret_mode)
        sys.exit(1)
    # return validated path
    return path


def get_code(secret):
    """Get TOTP verification code."""
    try:
        code = otp.get_totp(secret, True)
    except Exception as e:
        name = e.__class__.__name__
        print "ERROR: %s:" % name,
        for arg in e.args:
            print arg,
        print
        sys.exit(1)
    return code


def parser_setup():
    """Instantiate, configure and return an argparse instance."""
    p = argparse.ArgumentParser(description=description, epilog=epilog)
    p.add_argument("-d", "--debug", action="store_true",
                   help="print debug information")
    p.add_argument("-f", "--file", type=str, default="~/.ga",
                   help="Secret file")
    return p


# instantiate argparse
arg_parser = parser_setup()
args = arg_parser.parse_args()

# validate secret file path
secret_path = validate_secret_path(args.file)
if args.debug:
    print "Secret file path: %s\n" % secret_path

# read secret from file
secret_file = open(secret_path, "r")
secret = secret_file.read().strip()
secret_file.close()

# continually display codes or copy single code to clipboard
if args.debug:
    try:
        code = ""
        print "Time\t\tVerification Code"
        print "====\t\t================="
        while True:
            if not code or time.strftime("%S") in ("00", "30"):
                code = get_code(secret)
                print "%s\t%s" % (time.strftime("%H:%M:%S"), code)
                old_code = code
            time.sleep(1)
    except KeyboardInterrupt:
        sys.exit(130)
else:
    # newline terminated TOTP code
    code = "%s\n" % get_code(secret)
    # copy to clipboard
    sys.exit(pbcopy(code))
